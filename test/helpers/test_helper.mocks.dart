// Mocks generated by Mockito 5.4.4 from annotations
// in flutter_assesment/test/helpers/test_helper.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i6;
import 'dart:convert' as _i16;
import 'dart:typed_data' as _i18;

import 'package:dartz/dartz.dart' as _i2;
import 'package:flutter_assesment/core/error/failure.dart' as _i7;
import 'package:flutter_assesment/features/home/data/data_sources/category_remote_data_source.dart'
    as _i9;
import 'package:flutter_assesment/features/home/data/data_sources/popular_remote_data_source.dart'
    as _i13;
import 'package:flutter_assesment/features/home/data/models/category_model.dart'
    as _i10;
import 'package:flutter_assesment/features/home/data/models/popular_model.dart'
    as _i14;
import 'package:flutter_assesment/features/home/domain/entities/category.dart'
    as _i8;
import 'package:flutter_assesment/features/home/domain/entities/popular.dart'
    as _i12;
import 'package:flutter_assesment/features/home/domain/repositories/category_repository.dart'
    as _i3;
import 'package:flutter_assesment/features/home/domain/repositories/popular_repository.dart'
    as _i4;
import 'package:flutter_assesment/features/home/domain/usecases/get_all_categories.dart'
    as _i11;
import 'package:flutter_assesment/features/home/domain/usecases/get_all_popular.dart'
    as _i15;
import 'package:http/http.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i17;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeEither_0<L, R> extends _i1.SmartFake implements _i2.Either<L, R> {
  _FakeEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeCategoryRepository_1 extends _i1.SmartFake
    implements _i3.CategoryRepository {
  _FakeCategoryRepository_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakePopularRepository_2 extends _i1.SmartFake
    implements _i4.PopularRepository {
  _FakePopularRepository_2(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeResponse_3 extends _i1.SmartFake implements _i5.Response {
  _FakeResponse_3(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeStreamedResponse_4 extends _i1.SmartFake
    implements _i5.StreamedResponse {
  _FakeStreamedResponse_4(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [CategoryRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryRepository extends _i1.Mock
    implements _i3.CategoryRepository {
  MockCategoryRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.CategoryEntity>>>
      getCategories() => (super.noSuchMethod(
            Invocation.method(
              #getCategories,
              [],
            ),
            returnValue: _i6.Future<
                    _i2.Either<_i7.Failure, List<_i8.CategoryEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i8.CategoryEntity>>(
              this,
              Invocation.method(
                #getCategories,
                [],
              ),
            )),
          ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.CategoryEntity>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.CategoryEntity>>> search(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [query],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i8.CategoryEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i8.CategoryEntity>>(
          this,
          Invocation.method(
            #search,
            [query],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.CategoryEntity>>>);
}

/// A class which mocks [CategoryRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockCategoryRemoteDataSource extends _i1.Mock
    implements _i9.CategoryRemoteDataSource {
  MockCategoryRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i10.CategoryModel>> getCategories() => (super.noSuchMethod(
        Invocation.method(
          #getCategories,
          [],
        ),
        returnValue:
            _i6.Future<List<_i10.CategoryModel>>.value(<_i10.CategoryModel>[]),
      ) as _i6.Future<List<_i10.CategoryModel>>);

  @override
  _i6.Future<List<_i10.CategoryModel>> search(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [query],
        ),
        returnValue:
            _i6.Future<List<_i10.CategoryModel>>.value(<_i10.CategoryModel>[]),
      ) as _i6.Future<List<_i10.CategoryModel>>);
}

/// A class which mocks [GetAllCategoriesUserCase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllCategoriesUserCase extends _i1.Mock
    implements _i11.GetAllCategoriesUserCase {
  MockGetAllCategoriesUserCase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.CategoryRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakeCategoryRepository_1(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i3.CategoryRepository);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.CategoryEntity>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i8.CategoryEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i8.CategoryEntity>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.CategoryEntity>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i8.CategoryEntity>>> search(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [query],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i8.CategoryEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i8.CategoryEntity>>(
          this,
          Invocation.method(
            #search,
            [query],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i8.CategoryEntity>>>);
}

/// A class which mocks [PopularRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockPopularRepository extends _i1.Mock implements _i4.PopularRepository {
  MockPopularRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i12.PopularEntity>>>
      getAllPopular() => (super.noSuchMethod(
            Invocation.method(
              #getAllPopular,
              [],
            ),
            returnValue: _i6.Future<
                    _i2.Either<_i7.Failure, List<_i12.PopularEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i12.PopularEntity>>(
              this,
              Invocation.method(
                #getAllPopular,
                [],
              ),
            )),
          ) as _i6.Future<_i2.Either<_i7.Failure, List<_i12.PopularEntity>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i12.PopularEntity>>> search(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [query],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i12.PopularEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i12.PopularEntity>>(
          this,
          Invocation.method(
            #search,
            [query],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i12.PopularEntity>>>);
}

/// A class which mocks [PopularRemoteDataSource].
///
/// See the documentation for Mockito's code generation for more information.
class MockPopularRemoteDataSource extends _i1.Mock
    implements _i13.PopularRemoteDataSource {
  MockPopularRemoteDataSource() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<List<_i14.PopularModel>> getPopulars() => (super.noSuchMethod(
        Invocation.method(
          #getPopulars,
          [],
        ),
        returnValue:
            _i6.Future<List<_i14.PopularModel>>.value(<_i14.PopularModel>[]),
      ) as _i6.Future<List<_i14.PopularModel>>);

  @override
  _i6.Future<List<_i14.PopularModel>> search(String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [query],
        ),
        returnValue:
            _i6.Future<List<_i14.PopularModel>>.value(<_i14.PopularModel>[]),
      ) as _i6.Future<List<_i14.PopularModel>>);
}

/// A class which mocks [GetAllPopularUsecase].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetAllPopularUsecase extends _i1.Mock
    implements _i15.GetAllPopularUsecase {
  MockGetAllPopularUsecase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.PopularRepository get repository => (super.noSuchMethod(
        Invocation.getter(#repository),
        returnValue: _FakePopularRepository_2(
          this,
          Invocation.getter(#repository),
        ),
      ) as _i4.PopularRepository);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i12.PopularEntity>>> call() =>
      (super.noSuchMethod(
        Invocation.method(
          #call,
          [],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i12.PopularEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i12.PopularEntity>>(
          this,
          Invocation.method(
            #call,
            [],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i12.PopularEntity>>>);

  @override
  _i6.Future<_i2.Either<_i7.Failure, List<_i12.PopularEntity>>> search(
          String? query) =>
      (super.noSuchMethod(
        Invocation.method(
          #search,
          [query],
        ),
        returnValue:
            _i6.Future<_i2.Either<_i7.Failure, List<_i12.PopularEntity>>>.value(
                _FakeEither_0<_i7.Failure, List<_i12.PopularEntity>>(
          this,
          Invocation.method(
            #search,
            [query],
          ),
        )),
      ) as _i6.Future<_i2.Either<_i7.Failure, List<_i12.PopularEntity>>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i5.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.Future<_i5.Response> head(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #head,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #head,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i5.Response>);

  @override
  _i6.Future<_i5.Response> get(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #get,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #get,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<_i5.Response>);

  @override
  _i6.Future<_i5.Response> post(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i16.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #post,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #post,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i5.Response>);

  @override
  _i6.Future<_i5.Response> put(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i16.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #put,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #put,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i5.Response>);

  @override
  _i6.Future<_i5.Response> patch(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i16.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #patch,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #patch,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i5.Response>);

  @override
  _i6.Future<_i5.Response> delete(
    Uri? url, {
    Map<String, String>? headers,
    Object? body,
    _i16.Encoding? encoding,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #delete,
          [url],
          {
            #headers: headers,
            #body: body,
            #encoding: encoding,
          },
        ),
        returnValue: _i6.Future<_i5.Response>.value(_FakeResponse_3(
          this,
          Invocation.method(
            #delete,
            [url],
            {
              #headers: headers,
              #body: body,
              #encoding: encoding,
            },
          ),
        )),
      ) as _i6.Future<_i5.Response>);

  @override
  _i6.Future<String> read(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #read,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<String>.value(_i17.dummyValue<String>(
          this,
          Invocation.method(
            #read,
            [url],
            {#headers: headers},
          ),
        )),
      ) as _i6.Future<String>);

  @override
  _i6.Future<_i18.Uint8List> readBytes(
    Uri? url, {
    Map<String, String>? headers,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #readBytes,
          [url],
          {#headers: headers},
        ),
        returnValue: _i6.Future<_i18.Uint8List>.value(_i18.Uint8List(0)),
      ) as _i6.Future<_i18.Uint8List>);

  @override
  _i6.Future<_i5.StreamedResponse> send(_i5.BaseRequest? request) =>
      (super.noSuchMethod(
        Invocation.method(
          #send,
          [request],
        ),
        returnValue:
            _i6.Future<_i5.StreamedResponse>.value(_FakeStreamedResponse_4(
          this,
          Invocation.method(
            #send,
            [request],
          ),
        )),
      ) as _i6.Future<_i5.StreamedResponse>);

  @override
  void close() => super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValueForMissingStub: null,
      );
}
